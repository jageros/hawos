/**
 * @Author:  jager
 * @Email:   lhj168os@gmail.com
 * @File:    meta
 * @Date:    2022/3/8 5:33 下午
 * @package: metago
 * @Version: v1.0.0
 *
 * @Description:
 *
 */

package metatemp

import "fmt"

const iMeta = `// Code generated by metactl. DO NOT EDIT.
// source: metactl

package meta

import (
	"errors"

	"%s/meta"

	pb "%s"
)

var metaData = make(map[pb.%s]IMeta)

var NoMetaErr = errors.New("NoMetaErr")

type IMeta interface {
	GetMsgID() pb.%s
	EncodeArg(interface{}) ([]byte, error)
	DecodeArg([]byte) (interface{}, error)
	EncodeReply(interface{}) ([]byte, error)
	DecodeReply([]byte) (interface{}, error)
	Handle(session sess.ISession, arg interface{}) (interface{}, error)
}

func registerMeta(meta IMeta) {
	metaData[meta.GetMsgID()] = meta
}

func GetMeta(msgId pb.%s) (IMeta, error) {
	if m, ok := metaData[msgId]; ok {
		return m, nil
	} else {
		return nil, NoMetaErr
	}
}
`

func GenIMetaFile(enumName, basePath, inPkg string) string {
	return fmt.Sprintf(iMeta, basePath, inPkg, enumName, enumName, enumName)
}
